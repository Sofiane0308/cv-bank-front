{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["backendURL","App","className","Tabs","defaultActiveKey","id","Tab","eventKey","title","Component","Upload","state","selectedFiles","loading","uploadSuccess","onFileChange","event","console","log","target","files","setState","onFileUpload","formData","FormData","i","length","append","name","self","axios","post","headers","then","response","catch","error","label","uploadAlert","this","Alert","variant","Card","Body","Form","File","accept","onChange","multiple","custom","Button","disabled","onClick","Query","keyWords","result","e","index","value","splice","get","params","body","toString","data","resultView","Title","Table","striped","bordered","hover","map","article","addKeyWord","keyWord","Group","as","Row","Label","column","sm","Col","Control","type","handleChange","handleRemove","handleSubmit","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e12d2a26.chunk.js","sourcesContent":["import './App.css';\nimport { Button, Card, Row, Form, Col, Tabs, Tab, Table, Alert } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nconst backendURL = \"http://localhost:8080/\";\n\n// 2 tabs for uploading and querying\nclass App extends Component {\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <Tabs defaultActiveKey=\"upload\" id=\"uncontrolled-tab-example\" >\n          <Tab eventKey=\"upload\" title=\"Upload\">\n            <Upload />\n          </Tab>\n          <Tab eventKey=\"query\" title=\"Query\">\n            <Query />\n          </Tab>\n        </Tabs>\n      </div>);\n  }\n\n}\n\n\n//The upload tab\nclass Upload extends Component {\n\n  state = {\n    selectedFiles: [],\n    loading: false,\n    uploadSuccess: null,\n  };\n\n  // On file select (from the pop up) \n  onFileChange = event => {\n    console.log(event.target.files);\n    // Update the state \n    this.setState({ selectedFiles: event.target.files, uploadSuccess: false });\n\n  };\n\n  // On file upload (click the upload button) \n  onFileUpload = () => {\n\n    // Create an object of formData \n    const formData = new FormData();\n\n    // Update the formData object\n\n    for (let i = 0; i < this.state.selectedFiles.length; i++) {\n      formData.append(\n        \"files\",\n        this.state.selectedFiles[i],\n        this.state.selectedFiles[i].name\n      );\n    }\n\n\n    // Request made to the backend api \n    // Send formData object \n    let config = {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      }\n    }\n\n    this.setState({ loading: true});\n\n    var self = this;\n    axios.post(backendURL, formData, config)\n      .then(function (response) {\n        self.setState({ uploadSuccess: true, loading:false });\n      })\n      .catch(function (error) {\n        console.log(error);\n        self.setState({ uploadSuccess: false, loading:false });\n      });\n  };\n\n  render() {\n\n    let label;\n    if (this.state.selectedFiles.length) { label = \"CV(s) selected click on the Upload button!\" } else { label = \"Select CV(s) to upload\" }\n\n    let uploadAlert;\n    if (this.state.uploadSuccess) {\n      uploadAlert = <Alert variant=\"success\">\n        CV(s) uploaded successfully !\n  </Alert>\n    }\n\n    return <Card>\n      <Card.Body>\n        <Form.File\n          id=\"upload-cv\"\n          label={label}\n          accept=\".docx,.pdf\"\n          onChange={this.onFileChange}\n          multiple\n          custom\n        />\n\n        <hr />\n        <Button disabled={this.state.loading}\n          onClick={!this.state.loading ? this.onFileUpload : null}>\n          \n          {this.state.loading ? 'Uploading...' : 'Upload'}\n        </Button>\n        <hr />\n        {uploadAlert}\n\n      </Card.Body>\n    </Card>;\n  }\n\n}\n\n\n//The query tab\nclass Query extends Component {\n\n  state = {\n    keyWords: [\"\"],\n    result: []\n  }\n\n  addKeyWord() {\n    this.setState({ keyWords: [...this.state.keyWords, \"\"] });\n  }\n\n\n  handleChange(e, index) {\n    this.state.keyWords[index] = e.target.value;\n    this.setState({ keyWords: this.state.keyWords })\n  }\n\n  handleRemove(index) {\n    this.state.keyWords.splice(index, 1);\n    this.setState({ keyWords: this.state.keyWords })\n  }\n\n  handleSubmit(e) {\n    var self = this;\n    axios.get(backendURL + \"findByBody/\", {\n      params: {\n        body: this.state.keyWords.toString()\n      }\n    })\n      .then(function (response) {\n        self.setState({ result: response.data });\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n\n\n\n  render() {\n\n    let resultView;\n    if (this.state.result.length) resultView = <Card>\n      <Card.Body>\n        <Card.Title>\n          Matching CVs\n        </Card.Title>\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>CV</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.result.map((article, index) => <tr><td>{index}</td>  <td> {article} </td></tr>)}\n          </tbody>\n        </Table>\n      </Card.Body>\n    </Card>\n\n    return <Card>\n      <Card.Body>\n        <Card.Title>\n          Key words {'  '}\n          <Button variant=\"success\" onClick={(e) => this.addKeyWord(e)}> +  </Button>\n        </Card.Title>\n\n\n        {\n          this.state.keyWords.map((keyWord, index) => {\n            return (\n              <Form.Group as={Row} >\n                <Form.Label column sm=\"2\">\n                  Key word:\n                </Form.Label>\n                <Col sm=\"2\">\n                  <Form.Control type=\"text\" value={keyWord} onChange={(e) => this.handleChange(e, index)} />\n                </Col>\n\n                <Button variant=\"danger\" onClick={() => this.handleRemove(index)}> -  </Button>\n\n              </Form.Group>)\n          })\n        }\n\n        <hr />\n\n        <Button onClick={(e) => this.handleSubmit(e)}> Submit  </Button>\n        <hr />\n        {resultView}\n\n\n      </Card.Body>\n    </Card>\n      ;\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}